// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _SpatialX_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// fastComputeQuantitiesWithoutCVT
SEXP fastComputeQuantitiesWithoutCVT(SEXP Yin, SEXP locationin, SEXP kernel_paramin, SEXP Din, SEXP tauin, SEXP kernel_typein);
RcppExport SEXP _SpatialX_fastComputeQuantitiesWithoutCVT(SEXP YinSEXP, SEXP locationinSEXP, SEXP kernel_paraminSEXP, SEXP DinSEXP, SEXP tauinSEXP, SEXP kernel_typeinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Yin(YinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type locationin(locationinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_paramin(kernel_paraminSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_typein(kernel_typeinSEXP);
    rcpp_result_gen = Rcpp::wrap(fastComputeQuantitiesWithoutCVT(Yin, locationin, kernel_paramin, Din, tauin, kernel_typein));
    return rcpp_result_gen;
END_RCPP
}
// ComputeTestQuantRcpp_nocov
SEXP ComputeTestQuantRcpp_nocov(SEXP yin, SEXP Pyin, SEXP cov_matin, SEXP Din, SEXP tauin);
RcppExport SEXP _SpatialX_ComputeTestQuantRcpp_nocov(SEXP yinSEXP, SEXP PyinSEXP, SEXP cov_matinSEXP, SEXP DinSEXP, SEXP tauinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Pyin(PyinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cov_matin(cov_matinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeTestQuantRcpp_nocov(yin, Pyin, cov_matin, Din, tauin));
    return rcpp_result_gen;
END_RCPP
}
// CovariatesAI
SEXP CovariatesAI(SEXP Yin, SEXP Xin, SEXP Din, SEXP tauin, SEXP fixtauin, SEXP tolin);
RcppExport SEXP _SpatialX_CovariatesAI(SEXP YinSEXP, SEXP XinSEXP, SEXP DinSEXP, SEXP tauinSEXP, SEXP fixtauinSEXP, SEXP tolinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Yin(YinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fixtauin(fixtauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolin(tolinSEXP);
    rcpp_result_gen = Rcpp::wrap(CovariatesAI(Yin, Xin, Din, tauin, fixtauin, tolin));
    return rcpp_result_gen;
END_RCPP
}
// noCovariatesAI
SEXP noCovariatesAI(SEXP Yin, SEXP Xin, SEXP Din, SEXP tauin, SEXP fixtauin, SEXP tolin);
RcppExport SEXP _SpatialX_noCovariatesAI(SEXP YinSEXP, SEXP XinSEXP, SEXP DinSEXP, SEXP tauinSEXP, SEXP fixtauinSEXP, SEXP tolinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Yin(YinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fixtauin(fixtauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolin(tolinSEXP);
    rcpp_result_gen = Rcpp::wrap(noCovariatesAI(Yin, Xin, Din, tauin, fixtauin, tolin));
    return rcpp_result_gen;
END_RCPP
}
// FastTraceComputeTestQuantRcpp_cov
SEXP FastTraceComputeTestQuantRcpp_cov(SEXP Pyin, SEXP Xin, SEXP Kin, SEXP Din, SEXP tauin);
RcppExport SEXP _SpatialX_FastTraceComputeTestQuantRcpp_cov(SEXP PyinSEXP, SEXP XinSEXP, SEXP KinSEXP, SEXP DinSEXP, SEXP tauinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Pyin(PyinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Kin(KinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    rcpp_result_gen = Rcpp::wrap(FastTraceComputeTestQuantRcpp_cov(Pyin, Xin, Kin, Din, tauin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeTestQuantRcpp_cov
SEXP ComputeTestQuantRcpp_cov(SEXP yin, SEXP Pyin, SEXP Xin, SEXP cov_matin, SEXP Din, SEXP tauin);
RcppExport SEXP _SpatialX_ComputeTestQuantRcpp_cov(SEXP yinSEXP, SEXP PyinSEXP, SEXP XinSEXP, SEXP cov_matinSEXP, SEXP DinSEXP, SEXP tauinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Pyin(PyinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cov_matin(cov_matinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeTestQuantRcpp_cov(yin, Pyin, Xin, cov_matin, Din, tauin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeKernelParamLessMem
SEXP ComputeKernelParamLessMem(SEXP xin);
RcppExport SEXP _SpatialX_ComputeKernelParamLessMem(SEXP xinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xin(xinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeKernelParamLessMem(xin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeTestQuantRcpp_RLSKAT
SEXP ComputeTestQuantRcpp_RLSKAT(SEXP cov_matin, SEXP Xdaggerin, SEXP covariatesin, SEXP norm_countsin);
RcppExport SEXP _SpatialX_ComputeTestQuantRcpp_RLSKAT(SEXP cov_matinSEXP, SEXP XdaggerinSEXP, SEXP covariatesinSEXP, SEXP norm_countsinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cov_matin(cov_matinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xdaggerin(XdaggerinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covariatesin(covariatesinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type norm_countsin(norm_countsinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeTestQuantRcpp_RLSKAT(cov_matin, Xdaggerin, covariatesin, norm_countsin));
    return rcpp_result_gen;
END_RCPP
}
// ED_cpp
arma::mat ED_cpp(const arma::mat& x);
RcppExport SEXP _SpatialX_ED_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ED_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// MatrixInverse
SEXP MatrixInverse(SEXP Min);
RcppExport SEXP _SpatialX_MatrixInverse(SEXP MinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Min(MinSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixInverse(Min));
    return rcpp_result_gen;
END_RCPP
}
// SysMatEigen
SEXP SysMatEigen(SEXP Min);
RcppExport SEXP _SpatialX_SysMatEigen(SEXP MinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Min(MinSEXP);
    rcpp_result_gen = Rcpp::wrap(SysMatEigen(Min));
    return rcpp_result_gen;
END_RCPP
}
// SparseSysMatEigen
SEXP SparseSysMatEigen(SEXP Min, SEXP num_topin);
RcppExport SEXP _SpatialX_SparseSysMatEigen(SEXP MinSEXP, SEXP num_topinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Min(MinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type num_topin(num_topinSEXP);
    rcpp_result_gen = Rcpp::wrap(SparseSysMatEigen(Min, num_topin));
    return rcpp_result_gen;
END_RCPP
}
// LogLSFactorCpp
Eigen::SparseMatrix<double> LogLSFactorCpp(Eigen::SparseMatrix<double> data, int scale_factor, bool display_progress);
RcppExport SEXP _SpatialX_LogLSFactorCpp(SEXP dataSEXP, SEXP scale_factorSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type scale_factor(scale_factorSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLSFactorCpp(data, scale_factor, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// LogSizeFactorCpp
Eigen::SparseMatrix<double> LogSizeFactorCpp(Eigen::SparseMatrix<double> data, Eigen::VectorXd size_factor, int pseudo_count, bool display_progress);
RcppExport SEXP _SpatialX_LogSizeFactorCpp(SEXP dataSEXP, SEXP size_factorSEXP, SEXP pseudo_countSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type size_factor(size_factorSEXP);
    Rcpp::traits::input_parameter< int >::type pseudo_count(pseudo_countSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(LogSizeFactorCpp(data, size_factor, pseudo_count, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// FastSparseRowScaleData
Eigen::MatrixXd FastSparseRowScaleData(Eigen::SparseMatrix<double> mat, bool scale, bool center, double scale_max, bool display_progress);
RcppExport SEXP _SpatialX_FastSparseRowScaleData(SEXP matSEXP, SEXP scaleSEXP, SEXP centerSEXP, SEXP scale_maxSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< double >::type scale_max(scale_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSparseRowScaleData(mat, scale, center, scale_max, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// FastRowScaleData
NumericMatrix FastRowScaleData(Eigen::Map<Eigen::MatrixXd> mat, bool display_progress);
RcppExport SEXP _SpatialX_FastRowScaleData(SEXP matSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(FastRowScaleData(mat, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// ED2
Rcpp::NumericMatrix ED2(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SpatialX_ED2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ED2(x));
    return rcpp_result_gen;
END_RCPP
}
// ComputeDmW
arma::mat ComputeDmW(arma::mat A, double sigma, double alpha, double thr_car);
RcppExport SEXP _SpatialX_ComputeDmW(SEXP ASEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP thr_carSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type thr_car(thr_carSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeDmW(A, sigma, alpha, thr_car));
    return rcpp_result_gen;
END_RCPP
}
// Standardize
NumericMatrix Standardize(Eigen::Map<Eigen::MatrixXd> mat, bool display_progress);
RcppExport SEXP _SpatialX_Standardize(SEXP matSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(Standardize(mat, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// FastRowVar
NumericVector FastRowVar(Eigen::Map<Eigen::MatrixXd> x);
RcppExport SEXP _SpatialX_FastRowVar(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(FastRowVar(x));
    return rcpp_result_gen;
END_RCPP
}
// FastRowMean
NumericVector FastRowMean(Eigen::Map<Eigen::MatrixXd> x);
RcppExport SEXP _SpatialX_FastRowMean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(FastRowMean(x));
    return rcpp_result_gen;
END_RCPP
}
// FastSparseRowVar
Eigen::VectorXd FastSparseRowVar(Eigen::SparseMatrix<double> mat);
RcppExport SEXP _SpatialX_FastSparseRowVar(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSparseRowVar(mat));
    return rcpp_result_gen;
END_RCPP
}
// FastSparseRowMean
Eigen::VectorXd FastSparseRowMean(Eigen::SparseMatrix<double> mat);
RcppExport SEXP _SpatialX_FastSparseRowMean(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSparseRowMean(mat));
    return rcpp_result_gen;
END_RCPP
}
// sp_means_Rcpp
arma::rowvec sp_means_Rcpp(arma::sp_mat sp_data, bool rowMeans);
RcppExport SEXP _SpatialX_sp_means_Rcpp(SEXP sp_dataSEXP, SEXP rowMeansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowMeans(rowMeansSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_means_Rcpp(sp_data, rowMeans));
    return rcpp_result_gen;
END_RCPP
}
// sp_sums_Rcpp
arma::rowvec sp_sums_Rcpp(arma::sp_mat sp_data, bool rowSums);
RcppExport SEXP _SpatialX_sp_sums_Rcpp(SEXP sp_dataSEXP, SEXP rowSumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowSums(rowSumsSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_sums_Rcpp(sp_data, rowSums));
    return rcpp_result_gen;
END_RCPP
}
// sp_vars_Rcpp
arma::rowvec sp_vars_Rcpp(arma::sp_mat sp_data, bool rowVars);
RcppExport SEXP _SpatialX_sp_vars_Rcpp(SEXP sp_dataSEXP, SEXP rowVarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowVars(rowVarsSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_vars_Rcpp(sp_data, rowVars));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpatialX_rcpp_hello_world", (DL_FUNC) &_SpatialX_rcpp_hello_world, 0},
    {"_SpatialX_fastComputeQuantitiesWithoutCVT", (DL_FUNC) &_SpatialX_fastComputeQuantitiesWithoutCVT, 6},
    {"_SpatialX_ComputeTestQuantRcpp_nocov", (DL_FUNC) &_SpatialX_ComputeTestQuantRcpp_nocov, 5},
    {"_SpatialX_CovariatesAI", (DL_FUNC) &_SpatialX_CovariatesAI, 6},
    {"_SpatialX_noCovariatesAI", (DL_FUNC) &_SpatialX_noCovariatesAI, 6},
    {"_SpatialX_FastTraceComputeTestQuantRcpp_cov", (DL_FUNC) &_SpatialX_FastTraceComputeTestQuantRcpp_cov, 5},
    {"_SpatialX_ComputeTestQuantRcpp_cov", (DL_FUNC) &_SpatialX_ComputeTestQuantRcpp_cov, 6},
    {"_SpatialX_ComputeKernelParamLessMem", (DL_FUNC) &_SpatialX_ComputeKernelParamLessMem, 1},
    {"_SpatialX_ComputeTestQuantRcpp_RLSKAT", (DL_FUNC) &_SpatialX_ComputeTestQuantRcpp_RLSKAT, 4},
    {"_SpatialX_ED_cpp", (DL_FUNC) &_SpatialX_ED_cpp, 1},
    {"_SpatialX_MatrixInverse", (DL_FUNC) &_SpatialX_MatrixInverse, 1},
    {"_SpatialX_SysMatEigen", (DL_FUNC) &_SpatialX_SysMatEigen, 1},
    {"_SpatialX_SparseSysMatEigen", (DL_FUNC) &_SpatialX_SparseSysMatEigen, 2},
    {"_SpatialX_LogLSFactorCpp", (DL_FUNC) &_SpatialX_LogLSFactorCpp, 3},
    {"_SpatialX_LogSizeFactorCpp", (DL_FUNC) &_SpatialX_LogSizeFactorCpp, 4},
    {"_SpatialX_FastSparseRowScaleData", (DL_FUNC) &_SpatialX_FastSparseRowScaleData, 5},
    {"_SpatialX_FastRowScaleData", (DL_FUNC) &_SpatialX_FastRowScaleData, 2},
    {"_SpatialX_ED2", (DL_FUNC) &_SpatialX_ED2, 1},
    {"_SpatialX_ComputeDmW", (DL_FUNC) &_SpatialX_ComputeDmW, 4},
    {"_SpatialX_Standardize", (DL_FUNC) &_SpatialX_Standardize, 2},
    {"_SpatialX_FastRowVar", (DL_FUNC) &_SpatialX_FastRowVar, 1},
    {"_SpatialX_FastRowMean", (DL_FUNC) &_SpatialX_FastRowMean, 1},
    {"_SpatialX_FastSparseRowVar", (DL_FUNC) &_SpatialX_FastSparseRowVar, 1},
    {"_SpatialX_FastSparseRowMean", (DL_FUNC) &_SpatialX_FastSparseRowMean, 1},
    {"_SpatialX_sp_means_Rcpp", (DL_FUNC) &_SpatialX_sp_means_Rcpp, 2},
    {"_SpatialX_sp_sums_Rcpp", (DL_FUNC) &_SpatialX_sp_sums_Rcpp, 2},
    {"_SpatialX_sp_vars_Rcpp", (DL_FUNC) &_SpatialX_sp_vars_Rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpatialX(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
