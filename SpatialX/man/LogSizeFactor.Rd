% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatialtf.R
\name{LogSizeFactor}
\alias{LogSizeFactor}
\title{Normalize count data using deconvolution size factors}
\usage{
LogSizeFactor(data, scale.factor = NULL, pseudo.count = 1, verbose = TRUE)
}
\arguments{
\item{data}{A matrix, data.frame, or sparse matrix containing raw count data
with features (genes) as rows and cells as columns.}

\item{scale.factor}{Precomputed size factors. If NULL (default), size factors
are calculated using the deconvolution method from the
\code{scran} package.}

\item{pseudo.count}{Pseudo-count to add before log transformation to avoid
taking the log of zero. Default is 1.}

\item{verbose}{Logical indicating whether to print progress messages and
normalization statistics. Default is TRUE.}
}
\value{
Returns a normalized matrix with the same dimensions as the input
        data. The values are log-transformed (log1p) counts normalized by
        deconvolution size factors.
}
\description{
This function normalizes raw count data using deconvolution size factors
as described in Lun et al. (2016), followed by log transformation. This
method is particularly effective for single-cell and spatial transcriptomics
data as it handles the high proportion of zeros and varying library sizes
more robustly than simple library size normalization.
}
\details{
This function implements the deconvolution normalization method described
in Lun et al. (2016), which is particularly well-suited for single-cell
and spatial transcriptomics data. The method:

\itemize{
  \item Groups cells into clusters to pool information across cells
  \item Calculates pool-based size factors that are more robust to
        differential expression between cell types
  \item Deconvolves the pool-based factors to obtain cell-specific
        size factors
  \item Applies log(1 + x) transformation after normalization
}

The normalization process:
\enumerate{
  \item Cluster cells using \code{scran::quickCluster}
  \item Calculate deconvolution size factors using \code{scran::calculateSumFactors}
  \item Normalize counts by dividing by size factors and multiplying by
        the mean size factor
  \item Apply log(1 + pseudo.count + normalized counts) transformation
}

Advantages of deconvolution normalization:
\itemize{
  \item More robust to heterogeneous cell populations
  \item Better handles genes expressed in only a subset of cells
  \item Reduces technical bias in downstream analyses
  \item Particularly effective for data with many zero counts
}
}
\examples{
\dontrun{
# Create example count matrix
mat <- matrix(data = rbinom(n = 100, size = 5, prob = 0.2), nrow = 10)
rownames(mat) <- paste0("Gene_", 1:10)
colnames(mat) <- paste0("Cell_", 1:10)

# View raw counts
print("Raw counts:")
print(mat[1:5, 1:5])

# Normalize with deconvolution size factors
mat_norm <- LogSizeFactor(data = mat)
print("Normalized counts:")
print(mat_norm[1:5, 1:5])

# Normalize with custom pseudo-count
mat_norm_pseudo <- LogSizeFactor(data = mat, pseudo.count = 0.5, verbose = TRUE)

# Use precomputed size factors
library(scran)
sce <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = mat))
clust <- scran::quickCluster(sce)
precomputed_factors <- scran::calculateSumFactors(sce, cluster = clust)

mat_norm_precomputed <- LogSizeFactor(
  data = mat,
  scale.factor = precomputed_factors,
  verbose = TRUE
)

# Compare different normalization methods
libsize_norm <- LogLSFactor(mat)
deconv_norm <- LogSizeFactor(mat)

# Compare distributions
par(mfrow = c(1, 2))
hist(libsize_norm, main = "Library Size Normalization", breaks = 20)
hist(deconv_norm, main = "Deconvolution Normalization", breaks = 20)
}

}
\references{
Lun, A. T., Bach, K., & Marioni, J. C. (2016). Pooling across cells to
normalize single-cell RNA sequencing data with many zero counts. Genome
Biology, 17(1), 75.
}
\seealso{
\code{\link{LogLSFactor}}, \code{\link{NormalizeVST}},
\code{\link[scran]{calculateSumFactors}}, \code{\link[scran]{quickCluster}}
}
\concept{preprocessing}
