% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatialx.R
\name{set-if-null}
\alias{set-if-null}
\alias{\%||\%}
\alias{\%iff\%}
\title{Set default values based on NULL conditions}
\usage{
x \%||\% y

x \%iff\% y
}
\arguments{
\item{x}{An object to test for NULL}

\item{y}{A default value to use if conditions are met}
}
\value{
\itemize{
  \item \code{\%||\%}: Returns \code{y} if \code{x} is \code{NULL}, otherwise returns \code{x}
  \item \code{\%iff\%}: Returns \code{y} if \code{x} is \strong{not} \code{NULL}, otherwise returns \code{x} (which is \code{NULL})
}
}
\description{
These operators provide convenient ways to set default values when working with
potentially NULL objects. They are particularly useful for function parameters
and variable assignments where fallback values are needed.
}
\details{
These operators provide concise syntax for common conditional assignment patterns:

\describe{
  \item{\code{\%||\%}}{Useful for providing default values when an object might be NULL}
  \item{\code{\%iff\%}}{Useful for conditionally computing values only when needed}
}

The \code{\%||\%} operator is imported from the \code{rlang} package and follows
the same behavior. The \code{\%iff\%} operator is a complementary utility that
provides the inverse logic.
}
\examples{
# Basic usage of \%||\%
NULL \%||\% "default_value"  # Returns "default_value"
"existing_value" \%||\% "default_value"  # Returns "existing_value"

# Practical examples with function parameters
process_data <- function(data = NULL) {
  data <- data \%||\% read.csv("default_data.csv")
  # Process data...
}

# Using \%||\% with list elements
my_list <- list(a = 1, b = NULL)
my_list$a \%||\% 100  # Returns 1
my_list$b \%||\% 100  # Returns 100
my_list$c \%||\% 100  # Returns 100 (non-existent element)

# Basic usage of \%iff\%
"not_null" \%iff\% "computed_value"  # Returns "computed_value"
NULL \%iff\% "computed_value"        # Returns NULL

# Practical example with expensive computation
compute_expensive <- function(x) {
  x \%iff\% expensive_calculation(x)
}

# Using \%iff\% to conditionally add metadata
add_metadata <- function(obj, clusters) {
  obj$clusters <- clusters \%iff\% find_clusters(obj)
  return(obj)
}

# Combining both operators
config <- list(threshold = NULL)
threshold <- config$threshold \%||\% 0.5
result <- threshold \%iff\% process_data(threshold)

}
\concept{utils}
