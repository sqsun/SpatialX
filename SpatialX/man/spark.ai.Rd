% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatialvg.R
\name{spark.ai}
\alias{spark.ai}
\title{Fit spatial models using Average Information algorithm}
\usage{
spark.ai(
  model0,
  num_vc,
  tau = rep(0.1, num_vc + 1),
  fixtau = rep(0, num_vc + 1),
  maxiter = 500,
  tol = 1e-05,
  verbose = FALSE
)
}
\arguments{
\item{model0}{An initial generalized linear model object fitted by \code{glm}.
This serves as the starting point for the spatial model fitting.}

\item{num_vc}{Number of variance components (random effects) in the model.
This includes both the dispersion parameter and spatial
variance components.}

\item{tau}{Initial values for variance components parameters. Should be a
vector of length \code{num_vc + 1} where the first element is
typically the dispersion parameter. Default is \code{rep(0.1, num_vc + 1)}.}

\item{fixtau}{Indicator vector specifying which variance components should
be fixed during optimization. Use 1 to fix, 0 to estimate.
Default is \code{rep(0, num_vc + 1)} (all components estimated).}

\item{maxiter}{Maximum number of iterations for the AI algorithm. Default is 500.}

\item{tol}{Tolerance threshold for convergence. The algorithm stops when
parameter changes fall below this value. Default is 1e-5.}

\item{verbose}{Logical indicating whether to print iteration progress and
debugging information. Default is FALSE.}
}
\value{
Returns a list with the following components:
  \itemize{
    \item \code{theta}: Estimated variance components
    \item \code{coefficients}: Estimated fixed effects coefficients
    \item \code{linear.predictors}: Linear predictors (η = Xβ + offset)
    \item \code{fitted.values}: Fitted values on the response scale
    \item \code{Y}: Working response vector
    \item \code{residuals}: Response residuals (y - μ)
    \item \code{Py}: Projected working response vector
    \item \code{cov}: Covariance matrix of fixed effects
    \item \code{X}: Design matrix for fixed effects
    \item \code{D}: Diagonal weights matrix for the working response
    \item \code{converged}: Logical indicating whether the algorithm converged
  }
}
\description{
This function fits binary-based or count-based spatial models using the
Average Information (AI) algorithm, which is particularly efficient for
generalized linear mixed models with multiple variance components. It is
designed for Poisson and binomial spatial models and handles both fixed
and random effects.
}
\details{
The Average Information algorithm is an efficient method for estimating
variance components in generalized linear mixed models. This implementation:

\itemize{
  \item Supports both Poisson and binomial families for count and binary data
  \item Handles multiple variance components with optional fixing of parameters
  \item Uses efficient matrix computations for both single and multiple covariates
  \item Includes robust convergence checking and numerical stability measures
  \item Provides fallback to initial estimates when numerical issues occur
}

The algorithm proceeds as follows:
\enumerate{
  \item Initialize parameters from the base GLM model
  \item Compute the working response vector and weights
  \item Estimate initial variance components using method of moments
  \item Iteratively update parameters using the Average Information matrix
  \item Check convergence based on relative parameter changes
  \item Handle numerical instability with fallback strategies
}

For models with only an intercept term (single covariate), optimized
computational pathways are used for efficiency.
}
\examples{
\dontrun{
# Example with Poisson spatial model
library(stats)

# Generate example data
set.seed(123)
n <- 100
x <- rnorm(n)
spatial_effect <- rnorm(n, sd = 0.5)
mu <- exp(1 + 0.5*x + spatial_effect)
y <- rpois(n, mu)

# Fit initial Poisson GLM
model0 <- glm(y ~ x, family = poisson)

# Fit spatial model with one variance component
result <- spark.ai(
  model0 = model0,
  num_vc = 1,
  tau = c(1, 0.1),  # dispersion = 1, spatial variance = 0.1
  fixtau = c(1, 0),  # fix dispersion, estimate spatial variance
  maxiter = 100,
  tol = 1e-4,
  verbose = TRUE
)

# Check results
summary(result$coefficients)
result$theta
result$converged

# Example with binomial spatial model
y_binary <- rbinom(n, 1, plogis(0.5*x + spatial_effect))
model0_bin <- glm(y_binary ~ x, family = binomial)

result_bin <- spark.ai(
  model0 = model0_bin,
  num_vc = 1,
  maxiter = 100
)
}

}
\references{
Gilmour, A. R., Thompson, R., & Cullis, B. R. (1995). Average information
REML: an efficient algorithm for variance parameter estimation in linear
mixed models. Biometrics, 51(4), 1440-1450.

Breslow, N. E., & Clayton, D. G. (1993). Approximate inference in
generalized linear mixed models. Journal of the American Statistical
Association, 88(421), 9-25.
}
\seealso{
\code{\link{glm}}, \code{\link{SpatialVG}}, \code{\link{spark.x}}
}
