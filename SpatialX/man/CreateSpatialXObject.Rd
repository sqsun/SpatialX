% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatialx.R
\name{CreateSpatialXObject.default}
\alias{CreateSpatialXObject.default}
\alias{CreateSpatialXObject.Assay}
\alias{CreateSpatialXObject.SpatialX}
\alias{CreateSpatialXObject.Seurat}
\alias{CreateSpatialXObject}
\title{Create a SpatialX object from raw data}
\usage{
\method{CreateSpatialXObject}{default}(
  counts,
  location = NULL,
  cell.prop = NULL,
  domain.clust = NULL,
  project = "SpatialX",
  assay = "RNA",
  species = "hsa",
  names.field = 1,
  names.delim = "_",
  min.cells = 0,
  pct.cells = 0.005,
  min.features = 0,
  min.umi = 10,
  num.core = 1,
  row.names = NULL,
  version = "0.0.1",
  ...
)

\method{CreateSpatialXObject}{Assay}(
  counts,
  location = NULL,
  cell.prop = NULL,
  domain.clust = NULL,
  project = "SpatialX",
  assay = "RNA",
  names.field = 1,
  names.delim = "_",
  num.core = 1,
  meta.data = NULL,
  row.names = NULL,
  version = "0.0.1",
  ...
)

\method{CreateSpatialXObject}{SpatialX}(
  counts,
  counts.new = NULL,
  project = "SpatialX",
  assay = "RNA_new",
  names.field = 1,
  names.delim = "_",
  location = NULL,
  min.cells = 0,
  pct.cells = 0.005,
  min.umi = 10,
  num.core = 1,
  min.features = 0,
  row.names = NULL,
  version = "0.0.1",
  ...
)

\method{CreateSpatialXObject}{Seurat}(
  counts,
  project = "SpatialX",
  assay = "Spatial",
  names.assay = "SpatialRNA",
  split.by = NULL,
  names.field = 1,
  names.delim = "_",
  location = NULL,
  min.cells = 0,
  pct.cells = 0.005,
  min.umi = 10,
  num.core = 1,
  min.features = 0,
  row.names = NULL,
  version = "0.0.1",
  ...
)

CreateSpatialXObject(counts, ...)
}
\arguments{
\item{counts}{A Seurat object containing single-cell or spatial transcriptomics data}

\item{location}{Spatial coordinates data.frame or matrix with rows corresponding to
cells and columns for spatial coordinates (x, y). If NULL, attempts
to extract from Seurat object}

\item{cell.prop}{Cell type proportion matrix for spatial deconvolution analysis,
with rows as cell types and columns as spatial spots}

\item{domain.clust}{Spatial domain labels or cluster assignments for each
cell/spot. Can be a vector or factor with length equal to
number of cells}

\item{project}{Project name for the SpatialX object (default: "SpatialX")}

\item{assay}{Name of the assay in Seurat object to use for conversion (default: "Spatial")}

\item{species}{Species identifier for the data. Common values: "hsa" (human),
"mmu" (mouse), "rno" (rat), etc. Used for species-specific
analysis and annotation (default: "hsa")}

\item{names.field}{Field index in cell names containing sample information (default: 1)}

\item{names.delim}{Delimiter used in cell names to separate fields (default: '')}

\item{min.cells}{Include features detected in at least this many cells. Features
with fewer detected cells will be filtered out (default: 0)}

\item{pct.cells}{Minimum percentage of cells in which a feature must be detected
to be included (default: 0.005)}

\item{min.features}{Include cells where at least this many features are detected.
Cells with fewer features will be filtered out (default: 0)}

\item{min.umi}{Minimum UMI counts per cell. Cells with fewer UMIs will be filtered out (default: 10)}

\item{num.core}{Number of CPU cores to use for parallel processing (default: 1)}

\item{row.names}{Optional vector of feature names to use when \code{counts} is a
\code{data.frame} or \code{data.frame}-derived object}

\item{version}{Version of SpatialX specification this object follows (default: "0.0.1")}

\item{...}{Additional arguments passed to other methods}

\item{meta.data}{Additional metadata about each cell/spot. Should be a data.frame
with rows corresponding to cells and columns containing metadata
variables. If NULL, basic metadata (nFeature, nCount, orig.ident)
will be automatically generated}

\item{counts.new}{A count matrix or data object containing the new assay data
to be added to the SpatialX object}

\item{names.assay}{Name to assign to the assay in the resulting SpatialX object (default: 'SpatialRNA')}

\item{split.by}{Metadata column name in Seurat object that defines sample splits.
Useful when the Seurat object contains multiple samples that should
be processed separately}
}
\value{
Returns a fully initialized SpatialX object ready for spatial
transcriptomics analysis, containing:
\itemize{
\item Processed count matrix with quality control filters applied
\item Spatial coordinate information
\item Cell type proportion data (if provided)
\item Spatial domain assignments (if provided)
\item Species-specific annotations
\item Comprehensive metadata and version information
}

Returns a SpatialX object containing the count data, spatial coordinates,
and any provided cell type proportions, spatial domains, and metadata

Returns an updated SpatialX object containing the original data along
with the newly added assay, properly integrated and validated

Returns a SpatialX object containing the converted data with spatial
information and assay data structured for spatial transcriptomics analysis
}
\description{
This is the default method for creating a SpatialX object from raw count data,
spatial coordinates, and associated metadata. It provides a comprehensive
framework for initializing spatial transcriptomics data with built-in
quality control and data validation.

This function creates a SpatialX object from raw count data, enabling
spatial transcriptomics analysis with integrated spatial coordinates,
cell type proportions, and spatial domain information.

This function adds a new assay (e.g., RNA, ATAC, Spatial) to an existing
SpatialX object, enabling multi-modal data integration while maintaining
spatial context and existing data structure.

This function converts a Seurat object into a SpatialX object, enabling
spatial transcriptomics analysis with additional spatial context and
specialized data structures.
}
\details{
This default method provides the most flexible way to create SpatialX objects
from raw data inputs. It performs comprehensive data validation and quality
control, including:
\itemize{
\item Dimension matching between counts and spatial coordinates
\item Quality filtering based on multiple criteria (min.cells, pct.cells,
min.features, min.umi)
\item Species-specific gene annotation and validation
\item Integration of spatial deconvolution results
\item Spatial domain clustering and validation
\item Metadata organization and standardization
}

The function automatically generates basic cell-level metadata including
number of features detected (nFeature), total counts (nCount), and sample
identifiers extracted from cell names.

This function serves as a foundational constructor for SpatialX objects from
raw assay data. It creates a comprehensive spatial data structure that
integrates:
\itemize{
\item Gene expression counts from various technologies (RNA-seq, spatial transcriptomics)
\item Spatial coordinate information for spatial context
\item Cell type deconvolution results for mixed spatial spots
\item Spatial domain classifications for tissue region identification
\item Comprehensive cell-level metadata for downstream analysis
}

The function performs data validation, ensures proper dimension matching
between counts and spatial coordinates, and initializes the object with
appropriate slots for spatial analysis workflows.

This method extends an existing SpatialX object by adding new assay data,
enabling multi-modal analysis while preserving spatial relationships and
existing data structures. The function performs:
\itemize{
\item Validation of compatibility between new assay data and existing object
\item Spatial coordinate alignment and verification
\item Quality control filtering on the new assay data
\item Integration of the new assay into the SpatialX object structure
\item Preservation of all existing assays and metadata
}

The function ensures that cell barcodes between the existing object and new
assay data are properly matched, and applies the same rigorous quality control
standards to the new data as would be applied during initial object creation.

This function provides a bridge between the Seurat ecosystem and SpatialX,
allowing users to leverage existing Seurat objects for specialized spatial
analysis. The conversion process includes:
\itemize{
\item Extraction and transformation of count matrices
\item Integration of spatial coordinate information
\item Handling of multiple samples through splitting parameters
\item Quality control filtering based on cell and feature metrics
\item Preservation of essential metadata and assay information
}

The function performs validation to ensure spatial coordinates align properly
with cell barcodes and applies quality control filters to remove low-quality
cells and features.
}
\examples{
\dontrun{
# Create SpatialX object from basic count matrix and coordinates
counts <- matrix(rpois(1000, 5), nrow = 100, ncol = 10)
rownames(counts) <- paste0("Gene", 1:100)
colnames(counts) <- paste0("Spot_", 1:10)

locations <- data.frame(x = runif(10), y = runif(10))

spatialx_obj <- CreateSpatialXObject.default(
counts = counts,
location = locations,
project = "MyStudy",
species = "hsa"
)

# Create with comprehensive spatial analysis data
cell_props <- matrix(runif(30), nrow = 3, ncol = 10)
rownames(cell_props) <- c("Neuron", "Astrocyte", "Microglia")
domains <- factor(rep(c("Cortex", "Hippocampus"), each = 5))

spatialx_obj <- CreateSpatialXObject.default(
counts = counts,
location = locations,
cell.prop = cell_props,
domain.clust = domains,
species = "mmu",
min.cells = 3,
min.features = 100,
pct.cells = 0.01
)
}

\dontrun{
# Create from count matrix and spatial coordinates
counts_matrix <- matrix(rpois(1000, 5), nrow = 100, ncol = 10)
rownames(counts_matrix) <- paste0("Gene", 1:100)
colnames(counts_matrix) <- paste0("Spot_", 1:10)

spatial_coords <- data.frame(x = runif(10), y = runif(10))

spatialx_obj <- CreateSpatialXObject.Assay(
counts = counts_matrix,
location = spatial_coords,
project = "MySpatialProject"
)

# Create with cell type proportions and spatial domains
cell_proportions <- matrix(runif(50), nrow = 5, ncol = 10)
rownames(cell_proportions) <- c("Tcell", "Bcell", "Macrophage", "Neuron", "Astrocyte")
spatial_domains <- factor(rep(c("Domain1", "Domain2"), each = 5))

spatialx_obj <- CreateSpatialXObject.Assay(
counts = counts_matrix,
location = spatial_coords,
cell.prop = cell_proportions,
domain.clust = spatial_domains,
assay = "SpatialRNA"
)
}

\dontrun{
# Load an existing SpatialX object
data(existing_spatialx)

# Create new RNA assay data
new_rna_counts <- matrix(rpois(1000, 1), nrow = 100)
rownames(new_rna_counts) <- paste0("Gene", 1:100)
colnames(new_rna_counts) <- colnames(existing_spatialx)

# Add the new RNA assay to existing SpatialX object
updated_spatialx <- CreateSpatialXObject.SpatialX(
counts = existing_spatialx,
counts.new = new_rna_counts,
assay = "RNA_secondary",
min.cells = 5,
pct.cells = 0.01
)

# Add ATAC assay data with custom spatial coordinates
new_atac_data <- matrix(sample(0:1, 500, replace = TRUE), nrow = 50)
custom_locations <- data.frame(x = runif(ncol(new_atac_data)),
y = runif(ncol(new_atac_data)))

updated_spatialx <- CreateSpatialXObject.SpatialX(
counts = existing_spatialx,
counts.new = new_atac_data,
assay = "ATAC",
location = custom_locations
)
}

\dontrun{
# Load a Seurat object with spatial data
data(seurat_object_with_spatial)

# Convert to SpatialX object with default parameters
spatialx_obj <- CreateSpatialXObject.Seurat(
counts = seurat_object_with_spatial,
project = "MySpatialProject",
assay = "Spatial",
location = GetTissueCoordinates(seurat_object_with_spatial)
)

# Convert with sample splitting and filtering
spatialx_obj <- CreateSpatialXObject.Seurat(
counts = multi_sample_seurat,
split.by = "sample_id",
min.cells = 10,
min.features = 200,
pct.cells = 0.01
)
}

}
\seealso{
\code{\link{CreateSpatialXObject.Seurat}},
\code{\link{CreateSpatialXObject.SpatialX}},
\code{\link{CreateSpatialXObject.Assay}}

\code{\link{CreateSpatialXObject.Seurat}},
\code{\link{CreateSpatialXObject.SpatialX}},
\code{\link{AddMetaData}}

\code{\link{CreateSpatialXObject.Seurat}}, \code{\link{SpatialX-class}}

\code{\link{CreateSpatialXObject}}
}
