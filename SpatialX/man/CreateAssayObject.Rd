% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatialx.R
\name{CreateAssayObject}
\alias{CreateAssayObject}
\title{Create an Assay object from raw data}
\usage{
CreateAssayObject(
  counts,
  data,
  min.cells = 0,
  min.features = 0,
  pct.cells = 0.005,
  min.umi = 10,
  num.core = 1,
  ...
)
}
\arguments{
\item{counts}{Raw count data matrix with features as rows and cells as columns.
Can be a matrix, data.frame, or sparse matrix}

\item{data}{Pre-normalized data matrix (e.g., log-normalized, scaled). If
provided, do not pass \code{counts}. Should have the same
dimensions and feature/cell names as \code{counts} if both are
provided}

\item{min.cells}{Include features detected in at least this many cells.
Features with fewer detected cells will be filtered out.
To reintroduce excluded features, create a new object with
a lower cutoff (default: 0)}

\item{min.features}{Include cells where at least this many features are
detected. Cells with fewer features will be filtered out
(default: 0)}

\item{pct.cells}{Minimum percentage of cells in which a feature must be
detected to be included. Provides an alternative to
\code{min.cells} that scales with dataset size (default: 0.005)}

\item{min.umi}{Minimum UMI counts per cell. Cells with fewer UMIs will be
filtered out (default: 10)}

\item{num.core}{Number of CPU cores to use for parallel processing during
data validation and filtering (default: 1)}

\item{...}{Additional arguments passed to internal methods}
}
\value{
Returns an \code{\link{Assay}} object containing the processed
count data, normalized data (if provided), and associated metadata
}
\description{
Create an Assay object from a feature (e.g., gene) expression matrix.
The expected format of the input matrix is features x cells. This function
provides a flexible way to initialize Assay objects with built-in data
validation and quality control filtering.
}
\details{
This function creates a standardized Assay object that serves as the
foundational data structure for various analysis workflows. Key features:
\itemize{
\item Supports both raw counts and pre-normalized data inputs
\item Performs comprehensive quality control filtering
\item Maintains data integrity through validation checks
\item Handles both dense and sparse matrix formats efficiently
\item Provides flexible filtering criteria for different data types
}

The function applies filtering in two stages:
\enumerate{
\item Feature filtering: removes features detected in too few cells
\item Cell filtering: removes cells with too few features or UMIs
}

When both \code{counts} and \code{data} are provided, they must have
identical dimensions and feature/cell names. The function validates this
consistency to prevent downstream analysis errors.
}
\examples{
\dontrun{
# Create Assay object from raw counts
counts_matrix <- matrix(rpois(1000, 1), nrow = 100, ncol = 10)
rownames(counts_matrix) <- paste0("Gene_", 1:100)
colnames(counts_matrix) <- paste0("Cell_", 1:10)

assay_obj <- CreateAssayObject(
counts = counts_matrix,
min.cells = 3,
min.features = 200,
min.umi = 100
)

# Create with pre-normalized data
normalized_data <- log1p(counts_matrix)
assay_obj <- CreateAssayObject(
counts = counts_matrix,
data = normalized_data,
pct.cells = 0.01
)

# Create from sparse matrix
library(Matrix)
sparse_counts <- Matrix(counts_matrix, sparse = TRUE)
assay_obj <- CreateAssayObject(
counts = sparse_counts,
min.cells = 5
)
}

}
\seealso{
\code{\link{Assay-class}}
}
